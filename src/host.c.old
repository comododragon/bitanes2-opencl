#include <CL/opencl.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>

#include "common.h"
#include "graph.h"

#define MAX_STR_SZ 256

#if double == FP_T
#define FP_T_PRINTF_STRING "%lf"
#else
#define FP_T_PRINTF_STRING "%f"
#endif

/**
 * @brief Swap the extension of a file (or add it if the file has none.
 * @param inputFilename The input filename.
 * @param extesion The new extension, without initial dot.
 * @return The filename with the new extension, developer should free it after use.
 */
char *swapOrAddExtension(char *inputFilename, char *extension) {
	int i;
	char *outputFilename = NULL;

	/* Find for the dot in the input filename */
	for(i = strnlen(inputFilename, MAX_STR_SZ); i >= 0; i--) {
		/* Dot found, make swap */
		if('.' == inputFilename[i]) {
			outputFilename = calloc(i + strnlen(extension, MAX_STR_SZ) + 2, sizeof(char));
			strncpy(outputFilename, inputFilename, i + 1);
			strcpy(&outputFilename[i + 1], extension);
			break;
		}
	}

	/* No dot found, just add the extension */
	if(-1 == i) {
		outputFilename = calloc(strnlen(inputFilename, MAX_STR_SZ) + strnlen(extension, MAX_STR_SZ) + 2, sizeof(char));
		strcpy(outputFilename, inputFilename);
		outputFilename[strnlen(inputFilename, MAX_STR_SZ)] = '.';
		strcpy(&outputFilename[strnlen(inputFilename, MAX_STR_SZ) + 1], extension);
	}

	return outputFilename;
}

/**
 * @brief Standard statements for function error handling and printing.
 *
 * @param funcName Function name that failed.
 */
#define FUNCTION_ERROR_STATEMENTS(funcName) {\
	rv = EXIT_FAILURE;\
	PRINT_FAIL();\
	fprintf(stderr, "Error: %s failed with return code %d.\n", funcName, fRet);\
}

/**
 * @brief Standard statements for POSIX error handling and printing.
 *
 * @param arg Arbitrary string to the printed at the end of error string.
 */
#define POSIX_ERROR_STATEMENTS(arg) {\
	rv = EXIT_FAILURE;\
	PRINT_FAIL();\
	fprintf(stderr, "Error: %s: %s\n", strerror(errno), arg);\
}

int main(int argc, char *argv[]) {
	int rv = EXIT_SUCCESS;

	int i = 0;

	char *inputFilename, *outputFilename = NULL;
	FILE *inputFile = NULL, *outputFile = NULL;
	int n, m, np;
	graph_t *graph = NULL;
	int *compactGraph = NULL;
	unsigned int *compactGraphOffsets = NULL;
	FP_T *cb = NULL;
	unsigned int chunkSize, chunkSizeRem;

	cl_int platformsLen, devicesLen, fRet;
	cl_platform_id *platforms = NULL;
	cl_device_id *devices = NULL;
	cl_context context = NULL;
	cl_command_queue queue = NULL;
	FILE *programFile = NULL;
	long programSz;
	char *programContent = NULL;
	cl_int programRet;
	cl_program program = NULL;
	cl_kernel kernel = NULL;
	cl_mem adjListK;
	cl_mem adjOffsetsK;
	cl_mem cbK;
	cl_uint workDim = 1;
	size_t globalSize[1] = {
		1
	};

	/* Check if command line arguments were passed correctly */
	ASSERT_CALL(2 == argc, fprintf(stderr, "Usage: %s INPUTFILE\n", argv[0]));
	inputFilename = argv[1];
	outputFilename = swapOrAddExtension(inputFilename, "btw");

	/* Open input and output files and check their existence */
	inputFile = fopen(inputFilename, "r");
	ASSERT_CALL(inputFile, fprintf(stderr, "Error: %s: %s\n", strerror(errno), inputFilename));
	outputFile = fopen(outputFilename, "w");
	ASSERT_CALL(outputFile, fprintf(stderr, "Error: %s: %s\n", strerror(errno), outputFilename));

	/* Read file header and allocate stuff */
	fscanf(inputFile, "%d", &n);
	fscanf(inputFile, "%d", &m);
	graph_create(&graph, n, m);
	//cb = calloc(n, sizeof(FP_T));
	//sigma = malloc(n * sizeof(int));
	//d = malloc(n * sizeof(int));
	//delta = malloc(n * sizeof(FP_T));

	/* Read edges from file */
	unsigned int orig, dest;
	for(i = 0; i < m; i++) {
		fscanf(inputFile, "%d %d", &orig, &dest);
		graph_putEdge(graph, orig, dest);
		graph_putEdge(graph, dest, orig);
	}
	compactGraph = graph_compact(graph, &compactGraphOffsets);
	compactGraphOffsets = realloc(compactGraphOffsets, np * sizeof(int));
	compactGraphOffsets[n] = 2 * m;
	cb = malloc(n * sizeof(FP_T));
	chunkSize = n / globalSize[0];
	chunkSizeRem = n % globalSize[0];
	np = n + 1;

	/* Get platforms IDs */
	PRINT_STEP("Getting platforms IDs...");
	fRet = clGetPlatformIDs(0, NULL, &platformsLen);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clGetPlatformIDs"));
	platforms = malloc(platformsLen * sizeof(cl_platform_id));
	fRet = clGetPlatformIDs(platformsLen, platforms, NULL);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clGetPlatformIDs"));
	PRINT_SUCCESS();

	/* Get devices IDs for first platform availble */
	PRINT_STEP("Getting devices IDs for first platform...");
	fRet = clGetDeviceIDs(platforms[0], CL_DEVICE_TYPE_ALL, 0, NULL, &devicesLen);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clGetDevicesIDs"));
	devices = malloc(devicesLen * sizeof(cl_device_id));
	fRet = clGetDeviceIDs(platforms[0], CL_DEVICE_TYPE_ALL, devicesLen, devices, NULL);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clGetDevicesIDs"));
	PRINT_SUCCESS();

	/* Create context for first available device */
	PRINT_STEP("Creating context...");
	context = clCreateContext(NULL, 1, devices, NULL, NULL, &fRet);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clCreateContext"));
	PRINT_SUCCESS();

	/* Create command queue for kernel */
	PRINT_STEP("Creating command queue...");
	queue = clCreateCommandQueue(context, devices[0], 0, &fRet);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clCreateCommandQueue"));
	PRINT_SUCCESS();

	/* Open binary file */
	PRINT_STEP("Opening program binary...");
	programFile = fopen("program.aocx", "rb");
	ASSERT_CALL(programFile, POSIX_ERROR_STATEMENTS("program.aocx"));
	PRINT_SUCCESS();

	/* Get size and read file */
	PRINT_STEP("Reading program binary...");
	fseek(programFile, 0, SEEK_END);
	programSz = ftell(programFile);
	fseek(programFile, 0, SEEK_SET);
	programContent = malloc(programSz);
	fread(programContent, programSz, 1, programFile);
	fclose(programFile);
	programFile = NULL;
	PRINT_SUCCESS();

	/* Create program from binary file */
	PRINT_STEP("Creating program from binary...");
	program = clCreateProgramWithBinary(context, 1, devices, &programSz, (const unsigned char **) &programContent, &programRet, &fRet);
	ASSERT_CALL(CL_SUCCESS == programRet, FUNCTION_ERROR_STATEMENTS("clCreateProgramWithBinary (when loading binary)"));
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clCreateProgramWithBinary"));
	PRINT_SUCCESS();

	/* Build program */
	PRINT_STEP("Building program...");
	fRet = clBuildProgram(program, 1, devices, NULL, NULL, NULL);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clBuildProgram"));
	PRINT_SUCCESS();

	/* Create kernel */
	PRINT_STEP("Creating kernel \"brandesLoop\" from program...");
	kernel = clCreateKernel(program, "brandesLoop", &fRet);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clCreateKernel"));
	PRINT_SUCCESS();

	/* Create input and output buffers */
	PRINT_STEP("Creating buffers...");
	adjListK = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,  2 * m * sizeof(int), compactGraph, &fRet);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clCreateBuffer (adjListK)"));
	adjOffsetsK = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,  np * sizeof(unsigned int), compactGraphOffsets, &fRet);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clCreateBuffer (adjOffsetsK)"));
	cbK = clCreateBuffer(context, CL_MEM_READ_WRITE,  n * sizeof(FP_T), NULL, &fRet);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clCreateBuffer (cbK)"));
	PRINT_SUCCESS();

	/* Set kernel arguments for listTest */
	PRINT_STEP("Setting kernel arguments for \"brandesLoop\"...");
	fRet = clSetKernelArg(kernel, 0, sizeof(cl_mem), &adjListK);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (adjListK)"));
	fRet = clSetKernelArg(kernel, 1, sizeof(cl_mem), &adjOffsetsK);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (adjOffsetsK)"));
	fRet = clSetKernelArg(kernel, 2, sizeof(unsigned int), &n);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (n)"));
	fRet = clSetKernelArg(kernel, 3, sizeof(unsigned int), &chunkSize);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (chunkSize)"));
	fRet = clSetKernelArg(kernel, 4, sizeof(unsigned int), &chunkSizeRem);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (chunkSizeRem)"));
#if 0
	fRet = clSetKernelArg(kernel, 5, (n + 1) * sizeof(int), NULL);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (__local 5)"));
	fRet = clSetKernelArg(kernel, 6, sizeof(unsigned int), &np);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (np)"));
	fRet = clSetKernelArg(kernel, 7, (n + 1) * sizeof(int), NULL);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (__local 7)"));
	fRet = clSetKernelArg(kernel, 8, sizeof(unsigned int), &np);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (np)"));
	fRet = clSetKernelArg(kernel, 9, (n + 1) * sizeof(int), NULL);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (__local 9)"));
#endif
	fRet = clSetKernelArg(kernel, 5, sizeof(cl_mem), &cbK);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clSetKernelArg (cbK)"));
	PRINT_SUCCESS();

	PRINT_STEP("Running kernel...");
	fRet = clEnqueueNDRangeKernel(queue, kernel, workDim, NULL, globalSize, NULL, 0, NULL, NULL);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clEnqueueNDRangeKernel"));
	clFinish(queue);
	PRINT_SUCCESS();

	/* Get output buffers */
	PRINT_STEP("[%d] Getting kernels arguments...", i);
	fRet = clEnqueueReadBuffer(queue, cbK, CL_TRUE, 0, n * sizeof(FP_T), cb, 0, NULL, NULL);
	ASSERT_CALL(CL_SUCCESS == fRet, FUNCTION_ERROR_STATEMENTS("clEnqueueReadBuffer"));
	PRINT_SUCCESS();

	for(i = 0; i < n; i++)
		printf("cb[%d] = " FP_T_PRINTF_STRING "\n", i, cb[i] / 2);

_err:

	/* Dealloc buffers */
	if(cbK)
		clReleaseMemObject(cbK);
	if(adjOffsetsK)
		clReleaseMemObject(adjOffsetsK);
	if(adjListK)
		clReleaseMemObject(adjListK);

	/* Dealloc kernels */
	if(kernel)
		clReleaseKernel(kernel);

	/* Dealloc program */
	if(program)
		clReleaseProgram(program);
	if(programContent)
		free(programContent);
	if(programFile)
		fclose(programFile);

	/* Dealloc queues */
	if(queue)
		clReleaseCommandQueue(queue);

	/* Last OpenCL variables */
	if(context)
		clReleaseContext(context);
	if(devices)
		free(devices);
	if(platforms)
		free(platforms);

	if(cb)
		free(cb);
	if(compactGraphOffsets)
		free(compactGraphOffsets);
	if(compactGraph)
		free(compactGraph);
	if(graph)
		graph_destroy(&graph);

	if(outputFile)
		fclose(outputFile);
	if(inputFile)
		fclose(inputFile);
	if(outputFilename)
		free(outputFilename);

	return rv;
}
