#include "brandes.h"

#if double == FP_T
#pragma OPENCL EXTENSION cl_khr_fp64 : enable
#endif

// TODO ARRUMAR
// TODO ARRUMAR
// TODO ARRUMAR
// TODO ARRUMAR
// TODO ARRUMAR
// TODO ARRUMAR
// TODO: COLOCAR NO MAKEFILE SEI LA
#define INT_T int

#define CLLIST_INIT(listName, listMem, listMemSize, listType)\
	listType *_mem##listName = listMem;\
	int _capacity##listName = listMemSize;\
	int _size##listName = 0;\
	unsigned int _head##listName = 0;\
	unsigned int _tail##listName = 0;

#define CLLIST_VECINIT(listName, listMem, listMemSize, listType, noOfLists)\
	listType *_mem##listName[noOfLists];\
	int _capacity##listName[noOfLists];\
	int _size##listName[noOfLists];\
	unsigned int _head##listName[noOfLists];\
	unsigned int _tail##listName[noOfLists];\
	{ int _i; for(_i = 0; _i < noOfLists; _i++) { _mem##listName[_i] = &listMem[_i * listMemSize]; _capacity##listName[_i] = listMemSize; _size##listName[_i] = 0; _head##listName[_i] = 0; _tail##listName[_i] = 0; } }

#define CLLIST_RESET(listName) {\
	_size##listName = 0;\
	_head##listName = 0;\
	_tail##listName = 0;\
}

#define CLLIST_PUSHFRONT(listName, elem) {\
	if(_size##listName < _capacity##listName) {\
		_mem##listName[_head##listName] = elem;\
		_head##listName = _head##listName? (_head##listName - 1) : (_capacity##listName - 1);\
		if(!_size##listName)\
			_tail##listName = (_tail##listName + 1) % _capacity##listName;\
		_size##listName++;\
	}\
}

#define CLLIST_PUSHBACK(listName, elem) {\
	if(_size##listName < _capacity##listName) {\
		_mem##listName[_tail##listName] = elem;\
		_tail##listName = (_tail##listName + 1) % _capacity##listName;\
		if(!_size##listName)\
			_head##listName = _head##listName? (_head##listName - 1) : (_capacity##listName - 1);\
		_size##listName++;\
	}\
}

#define CLLIST_POPFRONT(listName) {\
	if(_size##listName) {\
		_head##listName = (_head##listName + 1) % _capacity##listName;\
		_size##listName--;\
\
		if(!_size##listName) {\
			_tail##listName = _tail##listName? (_tail##listName - 1) : (_capacity##listName - 1);\
		}\
	}\
}

#define CLLIST_ISEMPTY(listName) (!_size##listName)

#define CLLIST_FRONT(listName) (_size##listName? _mem##listName[(_head##listName + 1) % _capacity##listName] : -1)

__kernel void brandesLoop(
	__global INT_T * restrict adjList, __global unsigned INT_T * restrict adjOffsets, unsigned INT_T graphSize,
	//__local int * restrict listSMem, unsigned int listSMemSize,
	//__local int * restrict listQMem, unsigned int listQMemSize,
	//__local int * restrict listsPMem, unsigned int listsPMemSliceSize,
	__global INT_T * restrict listSMem,
	__global INT_T * restrict listQMem,
	__global INT_T * restrict listsPMem,
	__global FP_T * restrict cb
) {
	//__local int listSMem[LIST_MAX_SIZE + 1];
	//__local int listQMem[LIST_MAX_SIZE + 1];
	//__local int listsPMem[LIST_SIZE * LIST_SIZE];
	CLLIST_INIT(S, listSMem, LIST_MAX_SIZE + 1, __global INT_T);
	CLLIST_INIT(Q, listQMem, LIST_MAX_SIZE + 1, __global INT_T);
	CLLIST_VECINIT(P, listsPMem, LIST_MAX_SIZE, __global INT_T, LIST_MAX_SIZE);

	INT_T i, j, s, w, t, v;
	INT_T sigma[LIST_MAX_SIZE];
	INT_T d[LIST_MAX_SIZE];
	FP_T delta[LIST_MAX_SIZE];
	
//#pragma unroll
//	for(s = 0; s < LIST_MAX_SIZE; s++) {
//		if(s < graphSize) {
	for(s = 0; s < graphSize; s++) {
			CLLIST_RESET(S);
			CLLIST_RESET(Q);
//#pragma unroll
//			for(w = 0; w < LIST_MAX_SIZE; w++)
//				if(w < graphSize)
			for(w = 0; w < graphSize; w++)
					CLLIST_RESET(P[w]);
	
//#pragma unroll
//			for(t = 0; t < LIST_MAX_SIZE; t++) {
//				if(t < graphSize) {
			for(t = 0; t < graphSize; t++) {
					sigma[t] = 0;
					d[t] = -1;
//				}
			}
			sigma[s] = 1;
			d[s] = 0;
	
			CLLIST_PUSHBACK(Q, s);
	
//#pragma unroll
			while(!CLLIST_ISEMPTY(Q)) {
				v = CLLIST_FRONT(Q);
				CLLIST_POPFRONT(Q);
				CLLIST_PUSHFRONT(S, v);
	
#pragma unroll
//				for(i = adjOffsets[v]; i < adjOffsets[v + 1]; i++) {
				for(i = 0; i < adjOffsets[graphSize]; i++) {
					if(i >= adjOffsets[v] && i < adjOffsets[v + 1]) {
						w = adjList[i];
						if(d[w] < 0) {
							CLLIST_PUSHBACK(Q, w);
							d[w] = d[v] + 1;
						}
	
						if((d[v] + 1) == d[w]) {
							sigma[w] = sigma[w] + sigma[v];
							CLLIST_PUSHBACK(P[w], v);
						}
					}
				}
			}
	
//#pragma unroll
//			for(v = 0; v < LIST_MAX_SIZE; v++)
//				if(v < graphSize)
			for(v = 0; v < graphSize; v++)
					delta[v] = 0;
	
#pragma unroll
//			while(!CLLIST_ISEMPTY(S)) {
			for(i = 0; i < LIST_MAX_SIZE + 1; i++) {
				if(!CLLIST_ISEMPTY(S)) {
					w = CLLIST_FRONT(S);
					CLLIST_POPFRONT(S);
	
#pragma unroll
//					while(!CLLIST_ISEMPTY(P[w])) {
					for(j = 0; j < LIST_MAX_SIZE; j++) {
						if(!CLLIST_ISEMPTY(P[w])) {
							v = CLLIST_FRONT(P[w]);
							CLLIST_POPFRONT(P[w]);
	
							delta[v] = delta[v] + ((sigma[v] / ((FP_T) sigma[w])) * (1 + delta[w]));
						}
					}
	
					if(w != s) {
						cb[w] += delta[w];
					}
				}
			}
//		}
	}
}
